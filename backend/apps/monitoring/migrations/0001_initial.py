# Generated by Django 4.2.7 on 2025-09-20 15:08

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="ApplicationMetrics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="时间戳"
                    ),
                ),
                (
                    "active_users",
                    models.IntegerField(default=0, verbose_name="活跃用户数"),
                ),
                (
                    "total_users",
                    models.IntegerField(default=0, verbose_name="总用户数"),
                ),
                (
                    "new_users_today",
                    models.IntegerField(default=0, verbose_name="今日新用户"),
                ),
                (
                    "total_documents",
                    models.IntegerField(default=0, verbose_name="文档总数"),
                ),
                (
                    "documents_uploaded_today",
                    models.IntegerField(default=0, verbose_name="今日上传文档"),
                ),
                (
                    "total_document_size",
                    models.BigIntegerField(default=0, verbose_name="文档总大小(字节)"),
                ),
                (
                    "search_requests_today",
                    models.IntegerField(default=0, verbose_name="今日搜索请求"),
                ),
                (
                    "avg_search_response_time",
                    models.FloatField(default=0, verbose_name="平均搜索响应时间(ms)"),
                ),
                (
                    "search_success_rate",
                    models.FloatField(default=0, verbose_name="搜索成功率(%)"),
                ),
                (
                    "workflow_executions_today",
                    models.IntegerField(default=0, verbose_name="今日工作流执行"),
                ),
                (
                    "workflow_success_rate",
                    models.FloatField(default=0, verbose_name="工作流成功率(%)"),
                ),
                (
                    "avg_workflow_duration",
                    models.FloatField(default=0, verbose_name="平均工作流执行时间(秒)"),
                ),
                ("error_rate", models.FloatField(default=0, verbose_name="错误率(%)")),
                (
                    "critical_errors",
                    models.IntegerField(default=0, verbose_name="严重错误数"),
                ),
            ],
            options={
                "verbose_name": "应用指标",
                "verbose_name_plural": "应用指标",
                "db_table": "monitoring_application_metrics",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="SystemMetrics",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        auto_now_add=True, db_index=True, verbose_name="时间戳"
                    ),
                ),
                (
                    "cpu_usage_percent",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="CPU使用率(%)",
                    ),
                ),
                ("cpu_load_1m", models.FloatField(verbose_name="1分钟负载")),
                ("cpu_load_5m", models.FloatField(verbose_name="5分钟负载")),
                ("cpu_load_15m", models.FloatField(verbose_name="15分钟负载")),
                (
                    "memory_usage_percent",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="内存使用率(%)",
                    ),
                ),
                (
                    "memory_used_bytes",
                    models.BigIntegerField(verbose_name="已使用内存(字节)"),
                ),
                (
                    "memory_total_bytes",
                    models.BigIntegerField(verbose_name="总内存(字节)"),
                ),
                (
                    "disk_usage_percent",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="磁盘使用率(%)",
                    ),
                ),
                (
                    "disk_used_bytes",
                    models.BigIntegerField(verbose_name="已使用磁盘(字节)"),
                ),
                (
                    "disk_total_bytes",
                    models.BigIntegerField(verbose_name="总磁盘(字节)"),
                ),
                (
                    "network_bytes_sent",
                    models.BigIntegerField(default=0, verbose_name="网络发送字节数"),
                ),
                (
                    "network_bytes_recv",
                    models.BigIntegerField(default=0, verbose_name="网络接收字节数"),
                ),
                (
                    "active_connections",
                    models.IntegerField(default=0, verbose_name="活跃连接数"),
                ),
                (
                    "request_count",
                    models.IntegerField(default=0, verbose_name="请求总数"),
                ),
                (
                    "error_count",
                    models.IntegerField(default=0, verbose_name="错误总数"),
                ),
            ],
            options={
                "verbose_name": "系统指标",
                "verbose_name_plural": "系统指标",
                "db_table": "monitoring_system_metrics",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="MetricDefinition",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=200, unique=True, verbose_name="指标名称"
                    ),
                ),
                ("description", models.TextField(verbose_name="指标描述")),
                (
                    "metric_type",
                    models.CharField(
                        choices=[
                            ("counter", "计数器"),
                            ("gauge", "仪表盘"),
                            ("histogram", "直方图"),
                            ("summary", "摘要"),
                        ],
                        max_length=20,
                        verbose_name="指标类型",
                    ),
                ),
                (
                    "category",
                    models.CharField(
                        choices=[
                            ("system", "系统指标"),
                            ("application", "应用指标"),
                            ("business", "业务指标"),
                            ("custom", "自定义指标"),
                        ],
                        max_length=20,
                        verbose_name="指标分类",
                    ),
                ),
                (
                    "prometheus_name",
                    models.CharField(max_length=200, verbose_name="Prometheus指标名"),
                ),
                ("labels", models.JSONField(default=list, verbose_name="标签定义")),
                ("help_text", models.TextField(blank=True, verbose_name="帮助文本")),
                (
                    "collection_interval",
                    models.IntegerField(default=60, verbose_name="采集间隔(秒)"),
                ),
                (
                    "is_enabled",
                    models.BooleanField(default=True, verbose_name="是否启用"),
                ),
                (
                    "retention_days",
                    models.IntegerField(default=30, verbose_name="保留天数"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
            ],
            options={
                "verbose_name": "指标定义",
                "verbose_name_plural": "指标定义",
                "db_table": "monitoring_metric_definition",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="Dashboard",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="仪表板名称")),
                ("description", models.TextField(blank=True, verbose_name="描述")),
                ("layout", models.JSONField(default=dict, verbose_name="布局配置")),
                ("panels", models.JSONField(default=list, verbose_name="面板配置")),
                (
                    "is_public",
                    models.BooleanField(default=False, verbose_name="是否公开"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                ("view_count", models.IntegerField(default=0, verbose_name="查看次数")),
                (
                    "last_viewed_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后查看时间"
                    ),
                ),
                (
                    "allowed_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="dashboards",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="允许访问的用户",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_dashboards",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
            ],
            options={
                "verbose_name": "监控仪表板",
                "verbose_name_plural": "监控仪表板",
                "db_table": "monitoring_dashboard",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AlertRule",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="规则名称")),
                ("description", models.TextField(verbose_name="规则描述")),
                (
                    "operator",
                    models.CharField(
                        choices=[
                            (">", "大于"),
                            (">=", "大于等于"),
                            ("<", "小于"),
                            ("<=", "小于等于"),
                            ("==", "等于"),
                            ("!=", "不等于"),
                        ],
                        max_length=5,
                        verbose_name="比较操作符",
                    ),
                ),
                ("threshold", models.FloatField(verbose_name="阈值")),
                (
                    "duration",
                    models.IntegerField(default=300, verbose_name="持续时间(秒)"),
                ),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("info", "信息"),
                            ("warning", "警告"),
                            ("critical", "严重"),
                            ("fatal", "致命"),
                        ],
                        max_length=20,
                        verbose_name="严重程度",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "激活"),
                            ("inactive", "未激活"),
                            ("firing", "告警中"),
                            ("resolved", "已解决"),
                        ],
                        default="active",
                        max_length=20,
                        verbose_name="状态",
                    ),
                ),
                (
                    "notification_channels",
                    models.JSONField(default=list, verbose_name="通知渠道"),
                ),
                (
                    "notification_template",
                    models.TextField(blank=True, verbose_name="通知模板"),
                ),
                (
                    "silence_duration",
                    models.IntegerField(default=3600, verbose_name="静默时间(秒)"),
                ),
                (
                    "max_alerts_per_hour",
                    models.IntegerField(default=10, verbose_name="每小时最大告警数"),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="创建时间"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="更新时间"),
                ),
                (
                    "total_alerts",
                    models.IntegerField(default=0, verbose_name="总告警次数"),
                ),
                (
                    "last_alert_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="最后告警时间"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="创建者",
                    ),
                ),
                (
                    "metric_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="alert_rules",
                        to="monitoring.metricdefinition",
                        verbose_name="监控指标",
                    ),
                ),
            ],
            options={
                "verbose_name": "告警规则",
                "verbose_name_plural": "告警规则",
                "db_table": "monitoring_alert_rule",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="AlertInstance",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("firing", "告警中"),
                            ("resolved", "已解决"),
                            ("silenced", "已静默"),
                        ],
                        max_length=20,
                        verbose_name="状态",
                    ),
                ),
                ("message", models.TextField(verbose_name="告警消息")),
                ("started_at", models.DateTimeField(verbose_name="开始时间")),
                (
                    "resolved_at",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="解决时间"
                    ),
                ),
                ("trigger_value", models.FloatField(verbose_name="触发值")),
                (
                    "trigger_labels",
                    models.JSONField(default=dict, verbose_name="触发标签"),
                ),
                (
                    "notifications_sent",
                    models.JSONField(default=list, verbose_name="已发送通知"),
                ),
                (
                    "notification_count",
                    models.IntegerField(default=0, verbose_name="通知次数"),
                ),
                (
                    "alert_rule",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="instances",
                        to="monitoring.alertrule",
                        verbose_name="告警规则",
                    ),
                ),
            ],
            options={
                "verbose_name": "告警实例",
                "verbose_name_plural": "告警实例",
                "db_table": "monitoring_alert_instance",
                "ordering": ["-started_at"],
            },
        ),
        migrations.CreateModel(
            name="MetricData",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(db_index=True, verbose_name="时间戳"),
                ),
                ("value", models.FloatField(verbose_name="指标值")),
                ("labels", models.JSONField(default=dict, verbose_name="标签值")),
                (
                    "instance",
                    models.CharField(
                        blank=True, max_length=200, verbose_name="实例标识"
                    ),
                ),
                (
                    "job",
                    models.CharField(
                        blank=True, max_length=100, verbose_name="任务名称"
                    ),
                ),
                (
                    "metric_definition",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="data_points",
                        to="monitoring.metricdefinition",
                        verbose_name="指标定义",
                    ),
                ),
            ],
            options={
                "verbose_name": "指标数据",
                "verbose_name_plural": "指标数据",
                "db_table": "monitoring_metric_data",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["metric_definition", "timestamp"],
                        name="monitoring__metric__239cb2_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="monitoring__timesta_50ed25_idx"
                    ),
                    models.Index(
                        fields=["instance", "timestamp"],
                        name="monitoring__instanc_3440b1_idx",
                    ),
                ],
            },
        ),
    ]
