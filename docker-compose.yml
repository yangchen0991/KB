version: '3.8'

services:
  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: kb_nginx
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
      - ./media:/var/www/media
    depends_on:
      - backend
      - frontend
    networks:
      - kb_network

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: kb_postgres
    environment:
      POSTGRES_DB: knowledge_base
      POSTGRES_USER: kb_user
      POSTGRES_PASSWORD: kb_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - kb_network

  # Redis 缓存和消息队列
  redis:
    image: redis:7-alpine
    container_name: kb_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - kb_network

  # Elasticsearch 搜索引擎
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: kb_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - kb_network

  # Django 后端
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kb_backend
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://kb_user:kb_password@postgres:5432/knowledge_base
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - SECRET_KEY=your-secret-key-here
      - ALLOWED_HOSTS=localhost,127.0.0.1,nginx
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - kb_network

  # Celery Worker
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kb_celery_worker
    command: celery -A knowledge_base worker -l info
    environment:
      - DATABASE_URL=postgresql://kb_user:kb_password@postgres:5432/knowledge_base
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    volumes:
      - ./media:/app/media
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - kb_network

  # Celery Beat (定时任务)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: kb_celery_beat
    command: celery -A knowledge_base beat -l info
    environment:
      - DATABASE_URL=postgresql://kb_user:kb_password@postgres:5432/knowledge_base
      - REDIS_URL=redis://:redis_password@redis:6379/0
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - kb_network

  # Angular 前端
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: kb_frontend
    environment:
      - NODE_ENV=production
    networks:
      - kb_network

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: kb_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - kb_network

  # Grafana 监控面板
  grafana:
    image: grafana/grafana:latest
    container_name: kb_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - kb_network

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  prometheus_data:
  grafana_data:

networks:
  kb_network:
    driver: bridge